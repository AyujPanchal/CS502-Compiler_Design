
//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst implements GJNoArguVisitor<Integer> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Integer visit(NodeList n) {
      Integer _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeListOptional n) {
      if ( n.present() ) {
         Integer _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Integer visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public Integer visit(NodeSequence n) {
      Integer _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   Map<String, Integer> valueMap = new HashMap<String, Integer>();
   String Classname;
   String Methodname;
   int Localvar = 0;
   int Unreferencedvar = 0;
   int Controlflow = 0;
   ArrayList<String> Varlist = new ArrayList<String>();
   HashMap<String, String> map = new HashMap<>();
   HashMap<String, String> MethodMap = new HashMap<>();
   HashMap<String, Integer> formalMap = new HashMap<>();
   String methodString = "";
   String CurString = "";
   
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public Integer visit(Goal n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      print();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public Integer visit(MainClass n) {
      Integer _ret=null;
      n.f0.accept(this);
      String id = n.f1.f0.tokenImage;
      Classname = id;
      map.put(id, "Class " + id + " :\n" + "Method Test.main 1 1 1");
//      System.out.println("Class " + id + " :");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
//      ArrayList<String> sortedKeys
//          = new ArrayList<String>(map.keySet());
//
//      Collections.sort(sortedKeys);
//
//      // Display the TreeMap which is naturally sorted
//      for (String x : sortedKeys)
//          System.out.println(map.get(x));
//      System.out.println("Method Test.main 1 1 1");
      return _ret;
   }

   /**
    * f0 -> InheritanceDeclaration()
    *       | ClassDeclaration()
    */
   public Integer visit(TypeDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
//      print();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> "}"
    */
   public Integer visit(InheritanceDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      String id1 = n.f1.f0.tokenImage;
      n.f2.accept(this);
      String id2 = n.f3.f0.tokenImage;
      CurString = "";
      CurString += "Class " + id1 + " : " + id2 + "\n";
      CurString = CurString.substring(0, CurString.length()-1);
      map.put(id1, CurString);
//      System.out.println("Class " + id1 + " : " + id2);
      n.f4.accept(this);
      n.f5.accept(this);
      methodString = "";
      MethodMap.clear();
      CurString = "";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( MethodDeclaration() )*
    * f4 -> "}"
    */
   public Integer visit(ClassDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      String id = n.f1.f0.tokenImage;
      Classname = id;
      CurString += "Class " + id + " :\n";
//      System.out.println("Class " + id + " :");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      add();
      CurString = CurString.substring(0, CurString.length()-1);
      map.put(id, CurString);
//      ArrayList<String> sortedKeys
//          = new ArrayList<String>(map.keySet());
//
//      Collections.sort(sortedKeys);
//
//      // Display the TreeMap which is naturally sorted
//      for (String x : sortedKeys)
//          System.out.println(map.get(x));
      CurString = "";
      methodString = "";
      MethodMap.clear();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Integer visit(VarDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      Localvar += 1;
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Integer visit(MethodDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String id = n.f2.f0.tokenImage;
      Methodname = id;
//      System.out.print("Method " + Classname + "." + Methodname + " ");
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      Unreferencedvar = Localvar;
      n.f8.accept(this);
//      System.out.print(Localvar);
//      System.out.print(" ");
//      System.out.print(Unreferencedvar);
//      System.out.print(" ");
      Varlist.clear();
      formalMap.clear();
      n.f9.accept(this);
      Controlflow += 1;
      methodString += "Method " + Classname + "." + Methodname + " " + Localvar + " " + Unreferencedvar + " " + Controlflow + " \n";
      MethodMap.put(id, methodString);
//      System.out.println(Controlflow);
      Localvar = 0;
      Unreferencedvar = 0;
      Controlflow = 0;
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      methodString = "";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public Integer visit(FormalParameterList n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public Integer visit(FormalParameter n) {
      Integer _ret=null;
      n.f0.accept(this);
      String id = n.f1.f0.tokenImage;
      formalMap.put(id,0);
      Localvar += 1;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public Integer visit(FormalParameterRest n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | IntegerType()
    *       | BooleanType()
    *       | FloatType()
    *       | Identifier()
    */
   public Integer visit(Type n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public Integer visit(ArrayType n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public Integer visit(IntegerType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public Integer visit(BooleanType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "float"
    */
   public Integer visit(FloatType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | ArrayLookup()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public Integer visit(Statement n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Integer visit(Block n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Integer visit(AssignmentStatement n) {
      Integer _ret=null;
      String id = n.f0.f0.tokenImage;
      boolean b1 = true;
      for (int i = 0; i < Varlist.size(); i++) {
    	  if(Varlist.get(i)==id) {
    		  b1 = false;
    		  break;
    	  }
      }
      Varlist.add(id);
      if(b1 == true) {
    	  boolean p1 = false;
    	  ArrayList<String> keys = new ArrayList<String>(formalMap.keySet());
          for(String x: keys) {
        	  if(x == id) {
        		  p1 = true;
        		  formalMap.replace(id,formalMap.get(id)+1);
//        		  System.out.println(formalMap.get(id));
        		  break;
        	  }
          }
          if(p1) {
        	  if(formalMap.get(id) == 1) {
        		  Unreferencedvar -= 1;
        	  }
          }
          else {
        	  Unreferencedvar -= 1;
          }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public Integer visit(ArrayAssignmentStatement n) {
      Integer _ret=null;
      String id = n.f0.f0.tokenImage;
      boolean b1 = true;
      for (int i = 0; i < Varlist.size(); i++) {
    	  if(Varlist.get(i)==id) {
    		  b1 = false;
    		  break;
    	  }
      }
      Varlist.add(id);
      if(b1 == true) {
    	  boolean p1 = false;
    	  ArrayList<String> keys = new ArrayList<String>(formalMap.keySet());
          for(String x: keys) {
        	  if(x == id) {
        		  p1 = true;
        		  formalMap.replace(id,formalMap.get(id)+1);
//        		  System.out.println(formalMap.get(id));
        		  break;
        	  }
          }
          if(p1) {
        	  if(formalMap.get(id) == 1) {
        		  Unreferencedvar -= 1;
        	  }
          }
          else {
        	  Unreferencedvar -= 1;
          }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> ";"
    */
   public Integer visit(ArrayLookup n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }


   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public Integer visit(IfStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Integer visit(IfthenStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      Controlflow+=1;
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Integer visit(IfthenElseStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      Controlflow+=1;
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Integer visit(WhileStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      Controlflow+=1;
      return _ret;
   }


   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> FormalParameter()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "++"
    * f10 -> ")"
    * f11 -> "{"
    * f12 -> ( Statement() )*
    * f13 -> "}"
    */
   public Integer visit(ForStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      Localvar+=1;
      Controlflow+=1;
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Integer visit(PrintStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | NeqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | MultiplyExpression()
    *       | DivideExpression()
    *       | OrExpression()
    *       | CompareExpression()
    *       | MessageSend()
    *       | LengthExpression()
    *       | PrimaryExpression()
    */
   public Integer visit(Expression n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(AndExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public Integer visit(NeqExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(PlusExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(MinusExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(MultiplyExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(DivideExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public Integer visit(OrExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public Integer visit(CompareExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public Integer visit(MessageSend n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }


   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public Integer visit(LengthExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Integer visit(ExpressionList n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public Integer visit(ExpressionRest n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | FloatLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public Integer visit(PrimaryExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Integer visit(IntegerLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public Integer visit(FloatLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }


   /**
    * f0 -> "true"
    */
   public Integer visit(TrueLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public Integer visit(FalseLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Integer visit(Identifier n) {
      Integer _ret=null;
      n.f0.accept(this);
      String id = n.f0.tokenImage;
      ArrayList<String> keys = new ArrayList<String>(formalMap.keySet());
      for(String x: keys) {
    	  if(x == id) {
    		  formalMap.replace(id,formalMap.get(id)+1);
//    		  System.out.println(formalMap.get(id));
    		  if(formalMap.get(id) != null && formalMap.get(id) == 1) {
    	    	  Unreferencedvar -= 1;
    	      }
    		  break;
    	  }
      }
      
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public Integer visit(ThisExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      Controlflow+=1;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public Integer visit(ArrayAllocationExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Integer visit(AllocationExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public Integer visit(NotExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Integer visit(BracketExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public Integer visit(IdentifierList n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public Integer visit(IdentifierRest n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }
   
   public void add() {
	   ArrayList<String> sortedKeys = new ArrayList<String>(MethodMap.keySet());
		
	   Collections.sort(sortedKeys);
	
	   // Display the TreeMap which is naturally sorted
	   for (String x : sortedKeys)
		   CurString += (MethodMap.get(x));
   }
   
   public void print() {
	   ArrayList<String> sortedKeys = new ArrayList<String>(map.keySet());
	
	   Collections.sort(sortedKeys);
	
	   // Display the TreeMap which is naturally sorted
	   for (String x : sortedKeys)
		   System.out.println(map.get(x));
   }
   
   
}