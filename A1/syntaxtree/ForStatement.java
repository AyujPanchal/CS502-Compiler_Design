//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "for"
 * f1 -> "("
 * f2 -> FormalParameter()
 * f3 -> "="
 * f4 -> Expression()
 * f5 -> ";"
 * f6 -> Expression()
 * f7 -> ";"
 * f8 -> Statement()
 * f9 -> ")"
 * f10 -> "{"
 * f11 -> ( Statement() )*
 * f12 -> "}"
 */
public class ForStatement implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public FormalParameter f2;
   public NodeToken f3;
   public Expression f4;
   public NodeToken f5;
   public Expression f6;
   public NodeToken f7;
   public Statement f8;
   public NodeToken f9;
   public NodeToken f10;
   public NodeListOptional f11;
   public NodeToken f12;

   public ForStatement(NodeToken n0, NodeToken n1, FormalParameter n2, NodeToken n3, Expression n4, NodeToken n5, Expression n6, NodeToken n7, Statement n8, NodeToken n9, NodeToken n10, NodeListOptional n11, NodeToken n12) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
   }

   public ForStatement(FormalParameter n0, Expression n1, Expression n2, Statement n3, NodeListOptional n4) {
      f0 = new NodeToken("for");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = new NodeToken("=");
      f4 = n1;
      f5 = new NodeToken(";");
      f6 = n2;
      f7 = new NodeToken(";");
      f8 = n3;
      f9 = new NodeToken(")");
      f10 = new NodeToken("{");
      f11 = n4;
      f12 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

