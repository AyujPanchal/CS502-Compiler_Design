//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "for"
 * f1 -> "("
 * f2 -> Type()
 * f3 -> Identifier()
 * f4 -> "="
 * f5 -> Expression()
 * f6 -> ";"
 * f7 -> Expression()
 * f8 -> ";"
 * f9 -> Identifier()
 * f10 -> "++"
 * f11 -> ")"
 * f12 -> "{"
 * f13 -> ( Statement() )*
 * f14 -> "}"
 */
public class ForStatement implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public Type f2;
   public Identifier f3;
   public NodeToken f4;
   public Expression f5;
   public NodeToken f6;
   public Expression f7;
   public NodeToken f8;
   public Identifier f9;
   public NodeToken f10;
   public NodeToken f11;
   public NodeToken f12;
   public NodeListOptional f13;
   public NodeToken f14;

   public ForStatement(NodeToken n0, NodeToken n1, Type n2, Identifier n3, NodeToken n4, Expression n5, NodeToken n6, Expression n7, NodeToken n8, Identifier n9, NodeToken n10, NodeToken n11, NodeToken n12, NodeListOptional n13, NodeToken n14) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
      f13 = n13;
      f14 = n14;
   }

   public ForStatement(Type n0, Identifier n1, Expression n2, Expression n3, Identifier n4, NodeListOptional n5) {
      f0 = new NodeToken("for");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = n1;
      f4 = new NodeToken("=");
      f5 = n2;
      f6 = new NodeToken(";");
      f7 = n3;
      f8 = new NodeToken(";");
      f9 = n4;
      f10 = new NodeToken("++");
      f11 = new NodeToken(")");
      f12 = new NodeToken("{");
      f13 = n5;
      f14 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

